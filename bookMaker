#!/bin/bash
# v0.5.0
echo "bookMaker compiler"

# Initialize variables
book_path=""
output_string="tp"
srcPath="src"
boolean_flag=true

# Function to print usage
usage() {
  echo "Usage: $0 -b=DIR | -book=DIR -o=STRING [-y] | -n=BOOK-NAME"
  exit 1
}

# Function to create a new book template
create_book_template() {
  book_name=$1
  mkdir -p "$book_name"
  cp -R $srcPath "$book_name/$srcPath"
  echo "The book template has been created at $book_name"
  exit 0
}

# Function to concatenate .md files
concatenate_md_files() {
  output_file="$1/book/$(basename "$book_path").md"
  mkdir -p "$1/book" # Ensure the book directory exists
  # Remove the existing output file if it exists
  if [ -f "$output_file" ]; then
    rm "$output_file"
  fi
  # cat "$book_path/src/SUMMARY.md" > "$output_file" - no longer needed
  find "$book_path/$srcPath" -type f -name "*.md" ! -name "SUMMARY.md" | while read -r file; do
    cat "$file" >>"$output_file"
    if [ "$output_string" = "tp" ]; then
      echo -e "\n#pagebreak()\n" >>"$output_file"
    else
      echo -e "\n---\n" >>"$output_file"
    fi
  done
  echo "$output_file"
}

# Function to convert using pandoc
convert_with_pandoc() {
  input_file=$1
  output_file="${input_file%.md}.$output_string"
  echo "Running pandoc to convert $input_file to $output_file"
  pandoc "$input_file" -o "$output_file"
  echo "Outputted $output_file"
}

# Placeholder function for Typst conversion
typstConv() {
  echo "MD2Typst conversion script called."
  # Insert book.toml values into TEMPLATE.typ
  ./md2typst -b=$book_path
}

# Placeholder function for LaTeX conversion
LaTexConv() {
  echo "LaTeX conversion function called."
  # Implement LaTeX conversion logic here
}

# Parse command-line arguments
for arg in "$@"; do
  case $arg in
  -b=* | --book=*)
    book_path="${arg#*=}"
    shift
    ;;
  -o=* | --out=*)
    output_string="${arg#*=}"
    shift
    ;;
  -y)
    boolean_flag=true
    shift
    ;;
  -n=*)
    book_name="${arg#*=}"
    create_book_template "$book_name"
    ;;
  *)
    echo "Invalid argument: $arg"
    usage
    ;;
  esac
done

# Check if book_path is provided
if [ -z "$book_path" ]; then
  echo "Error: Book directory not specified"
  usage
fi

# Check if output_string is provided
if [ -z "$output_string" ]; then
  echo "Error: Output string not specified"
  usage
fi

# Check if the directory exists
if [ ! -d "$book_path" ]; then
  echo "Error: Directory '$book_path' does not exist"
  exit 1
fi

# Print out list of all subdirectories and files
#echo "Listing all files and subdirectories in '$book_path':"
#find "$book_path" -type d -print -o -type f -print

# Check for .md files
md_files=$(find "$book_path" -type f -name "*.md")
if [ -z "$md_files" ]; then
  echo "Error: No *.md files found in '$book_path'"
  exit 1
fi

# If -y flag is not set, prompt the user for confirmation
if ! $boolean_flag; then
  read -p "Do you wish to continue? (y/n) " user_response
  case $user_response in
  [Yy]*)
    echo "Continuing..."
    ;;
  *)
    echo "Aborting."
    exit 1
    ;;
  esac
fi

# Compile the .md files into one .md file
compiled_md_file=$(concatenate_md_files "$book_path")
echo "Compiled markdown file: $compiled_md_file"

# Check output string and perform appropriate action
case $output_string in
md)
  # Already printed the compiled markdown file, no need to print again
  ;;
pdf | odt | docx)
  convert_with_pandoc "$compiled_md_file"
  ;;
tp | typst)
  typstConv
  ;;
lt | latex)
  LaTexConv
  ;;
*)
  echo "Error: Invalid output format '$output_string'"
  usage
  ;;
esac
