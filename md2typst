#!/bin/bash
echo "MarkDown2Typst compiler"

# Initialize variables
file=""
template=""
out=""
bookname=""

# Function to print usage
usage() {
  echo "Usage: $0 -f=FILE | -t=TEMPLATE | -o=OUT | -b=BOOK"
  exit 1
}

# Function to convert headings and remove curly brackets in a file
process_typst_file() {
  echo "Converting Markdown to Typst format"
  sed -i 's/^#\{1\}/=/g; s/^#\{2\}/==/g; s/^#\{3\}/===/g; s/^#\{4\}/====/g; s/^#\{5\}/=====/g; s/^#\{6\}/======/g' "$1"
  sed -i 's/{{//g; s/}}//g' "$1"
  typst compile "$book_path/$bookname.typ"
}

# Parse command-line arguments
for arg in "$@"; do
  case $arg in
    -f=*|--file=*)
      file="${arg#*=}"
      shift
      ;;
    -t=*|--template=*)
      template="${arg#*=}"
      shift
      ;;
    -o=*|--out=*)
      out="${arg#*=}"
      shift
      ;;
    -b=*|--book=*)
      bookname="${arg#*=}"
      shift
      ;;
    *)
      echo "Invalid argument: $arg"
      usage
      ;;
  esac
done

# Check if -f or -b is provided
if [ -z "$file" ] && [ -z "$bookname" ]; then
  echo "Error: Please supply a file or bookname"
  usage
fi

# If -f is specified, run the compiler
if [ -n "$file" ]; then
  if [ -n "$out" ]; then
    typst compile "$file.typ" "$out"
    echo "Outputted $out"
  else
    echo "Error: Please specify the output file using -o"
    usage
  fi
  exit 0
fi

# Function to read a value from a TOML file
get_toml_value() {
    local file=$1
    local key=$2
#    echo "Getting value for key: $key from file: $file" # Debugging output
    # Extract the value using grep and sed
    local value=$(grep -oP "^$key\s*=\s*\"?\K[^\"]+" "$file")
    echo "$value"
}

read_toml_value() {
    echo "reading $src_path/book.toml values"
    local tomlpath="$src_path/book.toml"
    
    # Read values from the book.toml file
    title=$(get_toml_value "$tomlpath" "title")
    authors=$(get_toml_value "$tomlpath" "authors")
    description=$(get_toml_value "$tomlpath" "description")
    copyright_year=$(get_toml_value "$tomlpath" "copyright-year")
    this_edition=$(get_toml_value "$tomlpath" "this-edition")
    printed_by=$(get_toml_value "$tomlpath" "printed-by")
    contact_address=$(get_toml_value "$tomlpath" "contact-address")
    website_address=$(get_toml_value "$tomlpath" "website-address")
    page_size=$(get_toml_value "$tomlpath" "page-size")
    outer_margin=$(get_toml_value "$tomlpath" "outer-margin")
    inner_margin=$(get_toml_value "$tomlpath" "inner-margin")
    header=$(get_toml_value "$tomlpath" "header")
    footer=$(get_toml_value "$tomlpath" "footer")
    contents=$(get_toml_value "$tomlpath" "contents")
    cover_image=$(get_toml_value "$tomlpath" "cover-image")
}

replace_template_values() {
    local template_file="$book_path/TEMPLATE.typ"
    # Replace placeholders in TEMPLATE.typ
    echo "Replacing template values in $template_file"
    sed -i "s/{{\$title}}/$title/g" "$template_file"
    echo " what is this? s#{{\$authors}}/$authors/g"
    sed -i "s/{{\$authors}}/$authors/g" "$template_file"
    sed -i "s/{{\$description}}/$description/g" "$template_file"
    sed -i "s/{{\$copyright_year}}/$copyright_year/g" "$template_file"
    sed -i "s/{{\$this-edition}}/$this_edition/g" "$template_file"
    sed -i "s/{{\$printed-by}}/$printed_by/g" "$template_file"
    sed -i "s/{{\$contact_address}}/$contact_address/g" "$template_file"
    sed -i "s/{{\$website_address}}/$website_address/g" "$template_file"
    sed -i "s/{{\$page-size}}/$page_size/g" "$template_file"
    sed -i "s/{{\$outer-margin}}/$outer_margin/g" "$template_file"
    sed -i "s/{{\$inner-margin}}/$inner_margin/g" "$template_file"
    sed -i "s/{{\$header}}/$header/g" "$template_file"
    sed -i "s/{{\$footer}}/$footer/g" "$template_file"
    sed -i "s/{{\$contents}}/$contents/g" "$template_file"
    sed -i "s/{{\$cover-image}}/$cover_image/g" "$template_file"
}

# If -b is specified, set the bookname
if [ -n "$bookname" ]; then

  # ADD check the directory exists

  book_path="$bookname/book"
  src_path="$bookname/src"
  typ_file="$book_path/$bookname.typ"
  md_file="$book_path/$bookname.md"
  pdf_file="$book_path/$bookname.pdf"

  # Copy the Markdown content to the Typst file
  cp "$md_file" "$typ_file"

  # Process the Typst file
  process_typst_file "$typ_file"

  echo "$src_path/TEMPLATE.typ found?"

  # Check if there is a TEMPLATE.typ file in $bookName/src
  if [ -f "$src_path/TEMPLATE.typ" ]; then
    # Copy the TEMPLATE.typ file to the $bookName/book folder
    echo "Found $src_path/TEMPLATE.typ"
    cp "$src_path/TEMPLATE.typ" "$book_path/TEMPLATE.typ"
  fi

  # Check if there is a book.toml file in $bookName/src
  if [ -f "$src_path/book.toml" ]; then
    # Call the procedure to copy the values from book.toml to TEMPLATE.typ
    echo "add book.toml populating TEMPLATE.typ here"
    read_toml_value
    echo "next would replace values" # print for testing purposes
    replace_template_values
  fi

  # Add the template to the start of the Typst file (if specified)
  if [ -n "$template" ]; then # if no template specified
    cat "$template" "$typ_file" > "$typ_file.tmp" && mv "$typ_file.tmp" "$typ_file"
  else # if template in book directory
    if [ -f "$book_path/TEMPLATE.typ" ]; then
      echo "Found $book_path/TEMPLATE.typ"
      cat "$book_path/TEMPLATE.typ" "$typ_file" > "$typ_file.tmp" && mv "$typ_file.tmp" "$typ_file"
    fi
  fi

  # Run the typst compiler
  typst compile "$typ_file" "$pdf_file"
  echo "Outputted $pdf_file"
  exit 0
fi

# If no valid action was taken, show usage
usage
