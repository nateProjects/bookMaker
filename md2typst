#!/bin/bash
# v0.5.1
echo "MarkDown2Typst compiler"

# Detect if the system is macOS and Homebrew is installed
if [[ "$OSTYPE" == "darwin"* ]] && command -v brew >/dev/null 2>&1; then
    # macOS with Homebrew - use Homebrew versions
    SED="gsed"
    GREP="ggrep"
else
    # Linux or macOS without Homebrew - use system versions
    SED="sed"
    GREP="grep"
fi

# Initialize variables
file=""
template=""
out=""
bookname=""

# Function to print usage
usage() {
  echo "Usage: $0 -f=FILE | -t=TEMPLATE | -o=OUT | -b=BOOK"
  exit 1
}

# Function to convert MarkDown to Typst - esp. Obsidian-style Markdown / change as relevant
process_typst_file() {
  echo "Converting Markdown to Typst format"

  # Convert Markdown headings to Typst headings
  $SED -i -e 's/^# /= /g' "$1"
  $SED -i -e 's/^## /== /g' "$1"
  $SED -i -e 's/^### /=== /g' "$1"
  $SED -i -e 's/^#### /==== /g' "$1"
  $SED -i -e 's/^##### /===== /g' "$1"
  $SED -i -e 's/^###### /====== /g' "$1"

  # Remove any remaining curly brackets
  $SED -i 's/{{//g; s/}}//g' "$1"

  # Convert horizontal rules to Typst line
  $SED -i -E 's/^(\-\-\-|\*\*\*|___)$/#line\(length: 100%\)/g' "$1"

  # Convert Markdown footnotes to Typst footnotes
  $SED -i 's/\[\^\(.*\)\]/#footnote[\1]/g' "$1"

  # Convert Markdown block quotes to Typst quotes - removed autoquotes to fix problem with British quotes
  $SED -i -E 's/^> (.*)$/#quote(block:true, quotes:false)[\1]/g' "$1"

  # Convert Markdown italics to Typst emphasis
  $SED -i -E 's/_(.*?)_/\\_\1\\_/g' "$1"
  $SED -i -E 's/\*(.*?)\*/_\1_/g' "$1"

  # Convert Markdown bold to Typst strong
  $SED -i -E 's/\*\*(.*?)\*\*/\*\1\*/g' "$1"
  $SED -i -E 's/__(.*?)__/\\*\1\\*/g' "$1"

  # Convert HTML underline to Typst underline
  $SED -i -E 's/<u>(.*?)<\/u>/#underline[\1]/g' "$1"

  # Convert HTML alignment to Typst alignment
  $SED -i -E 's/<p align="?center"?>(.*?)<\/p>/#align(center)[\1]/g' "$1"
  $SED -i -E 's/<div align="?center"?>(.*?)<\/div>/#align(center)[\1]/g' "$1"
  $SED -i -E 's/<p align="?right"?>(.*?)<\/p>/#align(right)[\1]/g' "$1"
  $SED -i -E 's/<div align="?right"?>(.*?)<\/div>/#align(right)[\1]/g' "$1"

  # Convert Markdown comments to Typst comments
  $SED -i -E 's/%%(.*?)%%/\/\*\1\*\//g' "$1"

  # Convert highlighted text to Typst highlight
  $SED -i -E 's/==(.*?)==/#highlight[\1]/g' "$1"

  # Convert + bullets to - bullets
  $SED -i -E 's/^\+ /- /g' "$1"
  # Convert * bullets to - bullets
  $SED -i -E 's/^\* /- /g' "$1"

  # Convert Markdown links to Typst links
  $SED -i -E 's/\[(.*?)\]\((.*?)\)/#link("\2")[\1]/g' "$1"

  typst compile "$1"
}

# Parse command-line arguments
for arg in "$@"; do
  case $arg in
  -f=* | --file=*)
    file="${arg#*=}"
    file="${file//\"/}" # Remove any quotes from the file path
    shift
    ;;
  -t=* | --template=*)
    template="${arg#*=}"
    template="${template//\"/}" # Remove any quotes from the template path
    shift
    ;;
  -o=* | --out=*)
    out="${arg#*=}"
    out="${out//\"/}" # Remove any quotes from the output path
    shift
    ;;
  -b=* | --book=*)
    bookname="${arg#*=}"
    bookname="${bookname//\"/}" # Remove any quotes from the bookname
    shift
    ;;
  *)
    echo "Invalid argument: $arg"
    usage
    ;;
  esac
done

# Check if -f or -b is provided
if [ -z "$file" ] && [ -z "$bookname" ]; then
  echo "Error: Please supply a file or bookname"
  usage
fi

# If -f is specified, run the compiler
if [ -n "$file" ]; then
  if [ ! -f "$file" ]; then
    echo "Error: Input file '$file' not found"
    exit 1
  fi
  
  cp "$file" "${file%.*}.typ"
  echo "Copied $file to ${file%.*}.typ"
  process_typst_file "${file%.*}.typ"
  echo "Processed ${file%.*}.typ"

if [ -n "$out" ] || [ "$output_format" = "pdf" ]; then
  if [ -z "$out" ]; then
    # If -o=pdf was specified without a filename, use the input filename with .pdf extension
    out="${file%.*}.pdf"
  fi

    # Determine the output format based on the file extension
    output_format="${out##*.}"
    
    if [ "$output_format" = "typ" ]; then
      echo "Typst file created: ${file%.*}.typ"
    elif [ "$output_format" = "pdf" ]; then
      typst compile "${file%.*}.typ" "$out" --format="pdf"
      echo "Outputted $out"
    else
      echo "Error: Unsupported output format. Please use .typ or .pdf"
      exit 1
    fi
  else
    echo "No output file specified - presuming ${file%.*}.typ - use -o=FILENAME.pdf if you'd like pdf"
  fi
    exit 0
fi

# Function to read a value from a TOML file
get_toml_value() {
  local file=$1
  local key=$2
  # Extract the value using $GREP and $SED
  local value=$($GREP -oP "^$key\s*=\s*\"?\K[^\"]+" "$file")
  echo "$value" # needs this to output converted Typst
}

read_toml_value() {
  echo "Reading $src_path/book.toml values"
  local tomlpath="$src_path/book.toml"

  # Read values from the book.toml file
  title=$(get_toml_value "$tomlpath" "title")
  sub_title=$(get_toml_value "$tomlpath" "sub-title")
  authors=$(get_toml_value "$tomlpath" "authors")
  description=$(get_toml_value "$tomlpath" "description")
  copyright_year=$(get_toml_value "$tomlpath" "copyright-year")
  this_edition=$(get_toml_value "$tomlpath" "this-edition")
  published_by=$(get_toml_value "$tomlpath" "published-by")
  printed_by=$(get_toml_value "$tomlpath" "printed-by")
  contact_address=$(get_toml_value "$tomlpath" "contact-address")
  #website_address=$(get_toml_value "$tomlpath" "website-address")
  dedication=$(get_toml_value "$tomlpath" "dedication")
  disclaimer=$(get_toml_value "$tomlpath" "disclaimer")  
  page_size=$(get_toml_value "$tomlpath" "page-size")
  outer_margin=$(get_toml_value "$tomlpath" "outer-margin")
  inner_margin=$(get_toml_value "$tomlpath" "inner-margin")
  header=$(get_toml_value "$tomlpath" "header")
  footer=$(get_toml_value "$tomlpath" "footer")
  contents=$(get_toml_value "$tomlpath" "contents")
  fiction=$(get_toml_value "$tomlpath" "fiction")
  cover_image=$(get_toml_value "$tomlpath" "cover-image")
}

replace_template_values() {
  local template_file="$book_path/TEMPLATE.typ"
  # Replace placeholders in TEMPLATE.typ
  echo "Replacing template values in $template_file"
  $SED -i "s/{{\$title}}/$title/g" "$template_file"
  $SED -i "s/{{\$sub-title}}/$sub_title/g" "$template_file"
  $SED -i "s/{{\$authors}}/$authors/g" "$template_file"
  $SED -i "s/{{\$description}}/$description/g" "$template_file"
  $SED -i "s/{{\$copyright-year}}/$copyright_year/g" "$template_file"
  $SED -i "s/{{\$this-edition}}/$this_edition/g" "$template_file"
  $SED -i "s/{{\$published-by}}/$published_by/g" "$template_file"
  $SED -i "s/{{\$printed-by}}/$printed_by/g" "$template_file"
  $SED -i "s/{{\$contact-address}}/$contact_address/g" "$template_file"
  $SED -i "s/{{\$website-address}}/$website_address/g" "$template_file"
  $SED -i "s/{{\$dedication}}/$dedication/g" "$template_file"
  $SED -i "s/{{\$disclaimer}}/$disclaimer/g" "$template_file"  
  $SED -i "s/{{\$page-size}}/$page_size/g" "$template_file"
  $SED -i "s/{{\$outer-margin}}/$outer_margin/g" "$template_file"
  $SED -i "s/{{\$inner-margin}}/$inner_margin/g" "$template_file"
  $SED -i "s/{{\$header}}/$header/g" "$template_file"
  $SED -i "s/{{\$footer}}/$footer/g" "$template_file"
  # $SED -i "s/{{\$contents}}/$contents/g" "$template_file"
  $SED -i "s/{{\$cover-image}}/$cover_image/g" "$template_file"
}

# If -b is specified, set the bookname
if [ -n "$bookname" ]; then
  book_path="$bookname/book"
  src_path="$bookname/src"
  typ_file="$book_path/$bookname.typ"
  md_file="$book_path/$bookname.md"
  pdf_file="$book_path/$bookname.pdf"

  # Check if the directory exists
  if [ ! -d "$book_path" ]; then
    echo "Error: Book directory '$book_path' not found"
    exit 1
  fi

  # Check if the Markdown file exists
  if [ ! -f "$md_file" ]; then
    echo "Error: Markdown file '$md_file' not found"
    exit 1
  fi

  # Copy the Markdown content to the Typst file
  cp "$md_file" "$typ_file"

  # Process the Typst file
  process_typst_file "$typ_file"

  # Check if there is a TEMPLATE.typ file in $bookName/src
  if [ -f "$src_path/TEMPLATE.typ" ]; then
    # Copy the TEMPLATE.typ file to the $bookName/book folder
    cp "$src_path/TEMPLATE.typ" "$book_path/TEMPLATE.typ"
  fi

  # Check if there is a book.toml file in $bookName/src
  if [ -f "$src_path/book.toml" ]; then
    # Call the procedure to copy the values from book.toml to TEMPLATE.typ
    read_toml_value
    replace_template_values
  fi

  # Add the template to the start of the Typst file (if specified)
  if [ -n "$template" ]; then # if no template specified
    cat "$template" "$typ_file" >"$typ_file.tmp" && mv "$typ_file.tmp" "$typ_file"
  else # if template in book directory
    if [ -f "$book_path/TEMPLATE.typ" ]; then
      cat "$book_path/TEMPLATE.typ" "$typ_file" >"$typ_file.tmp" && mv "$typ_file.tmp" "$typ_file"
    fi
  fi

  # Run the typst compiler
  typst compile "$typ_file" "$pdf_file"
  echo "Outputted $pdf_file"
  exit 0
fi

# If no valid action was taken, show usage
usage